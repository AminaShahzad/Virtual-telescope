







import 'package:firebase_database/firebase_database.dart';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:syncfusion_flutter_gauges/gauges.dart';
import 'package:fl_chart/fl_chart.dart';

class DashboardScreen extends StatefulWidget {
  const DashboardScreen({Key? key}) : super(key: key);

  @override
  _DashboardScreenState createState() => _DashboardScreenState();
}

class _DashboardScreenState extends State<DashboardScreen> {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  Map<String, dynamic> sensorData = {
    "temperature": 0.0,
    "humidity": 0.0,
    "mq135": 0.0,
    "pm1_0": 0.0,
    "pm2_5": 0.0,
    "pm10_0": 0.0
  };

  @override
  void initState() {
    super.initState();
    fetchSensorData();
  }

  void fetchSensorData() {
  DatabaseReference ref = FirebaseDatabase.instance.ref("sensor_data");

  ref.onValue.listen((event) {
    if (event.snapshot.value != null) {
      Map<String, dynamic> data =
          Map<String, dynamic>.from(event.snapshot.value as Map);
      
      debugPrint("üì° Firebase Data: $data"); // Debugging output
       var latestEntry = data.entries.last.value;

      debugPrint("üì° Latest Sensor Data: $latestEntry"); // Debugging output

      setState(() {
        sensorData = {
          "temperature": latestEntry["temperature"]?.toDouble() ?? 0.0,
          "humidity": latestEntry["humidity"]?.toDouble() ?? 0.0,
          "mq135": latestEntry["mq135"]?.toDouble() ?? 0.0,
          "pm1_0": latestEntry["pm1_0"]?.toDouble() ?? 0.0,
          "pm2_5": latestEntry["pm2_5"]?.toDouble() ?? 0.0,
          "pm10_0": latestEntry["pm10_0"]?.toDouble() ?? 0.0
        };
      });
    }else {
      debugPrint("‚ö†Ô∏è No data found in Firebase!");
    }
  }, onError: (error) {
    debugPrint("‚ùå Firebase Error: $error");
  });
}

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        title: const Text("Sensor Dashboard"),
        backgroundColor: Colors.blueAccent,
      ),
      body: Padding(
        padding: const EdgeInsets.all(8.0),
        child: Column(
          children: [
            Flexible(child: _buildGauges()),
            const SizedBox(height: 8),
            Expanded(child: _buildGraphs()),
            
          ],
        ),
      ),
    );
  }

  Widget _buildGauges() {
    return SizedBox(
      height: 220,
      child: GridView.extent(
        maxCrossAxisExtent: 180,
        crossAxisSpacing: 15,
        mainAxisSpacing: 10,
        physics: const NeverScrollableScrollPhysics(),
        children: [
          _buildGauge("Temp", sensorData["temperature"], 0, 50, Colors.red),
          _buildGauge("Humidity", sensorData["humidity"], 0, 100, Colors.blue),
          _buildGauge("MQ135", sensorData["mq135"], 0, 500, Colors.green),
          _buildGauge("PM1.0", sensorData["pm1_0"], 0, 100, Colors.orange),
          _buildGauge("PM2.5", sensorData["pm2_5"], 0, 100, Colors.purple),
          _buildGauge("PM10", sensorData["pm10_0"], 0, 100, Colors.teal),
        ],
      ),
    );
  }

  Widget _buildGauge(String label, double value, double min, double max, Color color) {
    return Card(
      elevation: 5,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
      child: Padding(
        padding: const EdgeInsets.symmetric(vertical: 1),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(label, style: const TextStyle(fontSize: 12, fontWeight: FontWeight.bold)),
            SizedBox(
              height: 100,
              child: SfRadialGauge(
                axes: <RadialAxis>[
                  RadialAxis(
                    minimum: min,
                    maximum: max,
                    showLabels: false,
                    pointers: <GaugePointer>[
                      NeedlePointer(value: value, enableAnimation: true, needleColor: color),
                    ],
                    ranges: <GaugeRange>[
                      GaugeRange(startValue: min, endValue: max * 0.4, color: Colors.green),
                      GaugeRange(startValue: max * 0.4, endValue: max * 0.7, color: Colors.orange),
                      GaugeRange(startValue: max * 0.7, endValue: max, color: Colors.red),
                    ],
                  ),
                ],
              ),
            ),
            Text(value.toStringAsFixed(1),
                style: TextStyle(fontSize: 12, fontWeight: FontWeight.bold, color: color)),
          ],
        ),
      ),
    );
  }

  Widget _buildGraphs() {
  return Column(
    children: [
      const Text("Real-Time Sensor Data",
          style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
      SizedBox(height: 8),
      Expanded(
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 8),
          child: LineChart(
            LineChartData(
              gridData: FlGridData(show: true, drawVerticalLine: true,drawHorizontalLine: true),
              titlesData: FlTitlesData(
                leftTitles: AxisTitles(
                  axisNameWidget: const Text("Sensor Value",
        style: TextStyle(fontSize: 14, fontWeight: FontWeight.bold)),
                  sideTitles: SideTitles(
                    showTitles: true,
                    reservedSize: 32,
                    getTitlesWidget: (value, meta) {
                      return Text(value.toInt().toString(),
                          style: TextStyle(fontSize: 10));
                    },
                  ),
                ),
                bottomTitles: AxisTitles(
                  axisNameWidget: const Text("Time",
        style: TextStyle(fontSize: 14, fontWeight: FontWeight.bold)),
                  sideTitles: SideTitles(
                    showTitles: true,
                    reservedSize: 22,
                    getTitlesWidget: (value, meta) {
                      return Text("T${value.toInt()}",
                          style: TextStyle(fontSize: 10));
                    },
                  ),
                ),
              ),
              borderData: FlBorderData(
                  show: true,
                  border: Border.all(color: Colors.black12, width: 1)),
              lineBarsData: [
                _buildLineChart(sensorData["temperature"], Colors.red, "Temp"),
                _buildLineChart(sensorData["humidity"], Colors.blue, "Hum"),
                _buildLineChart(sensorData["mq135"], Colors.green, "MQ135"),
                _buildLineChart(sensorData["pm1_0"], Colors.orange, "PM1.0"),
                _buildLineChart(sensorData["pm2_5"], Colors.purple, "PM2.5"),
                _buildLineChart(sensorData["pm10_0"], Colors.teal, "PM10.0"),
              ],
            ),
          ),
        ),
      ),
      const SizedBox(height: 10), // Space before the legend
      _buildLegend(), // ‚úÖ Placed below the graph
    ],
  );
}


   LineChartBarData _buildLineChart(double value, Color color, String mnemonic) {
    return LineChartBarData(
      spots: [
        FlSpot(0, value * 0.8),
        FlSpot(1, value * 0.9),
        FlSpot(2, value),
        FlSpot(3, value * 1.1),
        FlSpot(4, value * 1.2),
      ],
      isCurved: true,
      color: color,
      barWidth: 3,
      belowBarData: BarAreaData(show: false),
      dotData: FlDotData(show: true),
      showingIndicators: [2],
    );
  }

   Widget _buildLegend() {
    return Padding(
      padding: const EdgeInsets.all(4.0),
      child: Wrap(
        spacing: 10,
        alignment: WrapAlignment.center,
        children: [
          _buildLegendItem(Colors.red, "Temp"),
          _buildLegendItem(Colors.blue, "Hum"),
          _buildLegendItem(Colors.green, "MQ135"),
          _buildLegendItem(Colors.orange, "PM1.0"),
          _buildLegendItem(Colors.purple, "PM2.5"),
          _buildLegendItem(Colors.teal, "PM10.0"),
        ],
      ),
    );
  }

  Widget _buildLegendItem(Color color, String label) {
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        
        Container(width: 10, height: 10, color: color),
        const SizedBox(width: 4),
        Text(label, style: const TextStyle(fontSize: 12)),
      ],
    );
  }
}

